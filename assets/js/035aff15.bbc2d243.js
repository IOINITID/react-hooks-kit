"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[843],{6990:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var o=n(7462),a=n(3366),s=(n(7294),n(3905)),r=["components"],i={sidebar_position:1},l="useModalState",d={unversionedId:"hooks/state/use-modal-state",id:"hooks/state/use-modal-state",isDocsHomePage:!1,title:"useModalState",description:"What is it needed for",source:"@site/docs/hooks/state/use-modal-state.md",sourceDirName:"hooks/state",slug:"/hooks/state/use-modal-state",permalink:"/react-hooks-kit/docs/hooks/state/use-modal-state",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/hooks/state/use-modal-state.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/react-hooks-kit/docs/intro"},next:{title:"useToggle",permalink:"/react-hooks-kit/docs/hooks/state/use-toggle"}},p=[{value:"What is it needed for",id:"what-is-it-needed-for",children:[]},{value:"Advantages",id:"advantages",children:[]},{value:"How to start using",id:"how-to-start-using",children:[]},{value:"Options",id:"options",children:[]}],c={toc:p};function u(t){var e=t.components,n=(0,a.Z)(t,r);return(0,s.kt)("wrapper",(0,o.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"usemodalstate"},"useModalState"),(0,s.kt)("h2",{id:"what-is-it-needed-for"},"What is it needed for"),(0,s.kt)("p",null,"You can use it to manage the state of your modals faster and more flexibly. Both our own and ready-made libraries."),(0,s.kt)("h2",{id:"advantages"},"Advantages"),(0,s.kt)("p",null,"When we write modals, a lot of boilerplate code is generated, for example, to create states for working with a modal window, we need to write something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Component = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onOpen = () => setIsOpen(true);\n  const onClose = () => setIsOpen(false);\n\n  // Button component\n  <Button onClick={onOpen}>Open modal window</Button>\n\n  // Modal window component\n  <Modal isOpen={isOpen} onClose={onClose}>\n    // Component code...\n  </Modal>\n};\n")),(0,s.kt)("p",null,"From the example above, you can see how much needs to be written to manage a single state. By using ",(0,s.kt)("strong",{parentName:"p"},"useModalState"),", you don't need to write extra code or create extra states inside your component."),(0,s.kt)("h2",{id:"how-to-start-using"},"How to start using"),(0,s.kt)("p",null,"In order to start using this hook, you need to import it into your project:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useModalState } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { isOpen, onOpen, onClose, onToggle } = useModalState();\n\n   // Button component\n  <Button onClick={onOpen}>Open modal window</Button>\n\n   // Modal window component\n  <Modal isOpen={isOpen} onClose={onClose}>\n   // Component code...\n  </Modal>\n};\n")),(0,s.kt)("p",null,"You can also set the initial state for the modal window:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useModalState } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { isOpen, onOpen, onClose, onToggle } = useModalState({ initialIsOpen: true });\n\n   // Button component\n  <Button onClick={onOpen}>Open modal window</Button>\n\n   // Modal window component\n  <Modal isOpen={isOpen} onClose={onClose}>\n   // Component code...\n  </Modal>\n};\n")),(0,s.kt)("p",null,"This will open it by default."),(0,s.kt)("p",null,"The following functions are available for working with the state of the modal window:"),(0,s.kt)("h2",{id:"options"},"Options"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,s.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,s.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"center"},"isOpen"),(0,s.kt)("td",{parentName:"tr",align:"center"},"boolean"),(0,s.kt)("td",{parentName:"tr",align:"center"},"Returns the open state of the modal window.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"center"},"onOpen"),(0,s.kt)("td",{parentName:"tr",align:"center"},"() => void"),(0,s.kt)("td",{parentName:"tr",align:"center"},"Function for opening a modal window.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"center"},"onClose"),(0,s.kt)("td",{parentName:"tr",align:"center"},"() => void"),(0,s.kt)("td",{parentName:"tr",align:"center"},"Function to close the modal window.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"center"},"onToggle"),(0,s.kt)("td",{parentName:"tr",align:"center"},"() => void"),(0,s.kt)("td",{parentName:"tr",align:"center"},"Toggles the state of the modal to the opposite.")))))}u.isMDXComponent=!0}}]);