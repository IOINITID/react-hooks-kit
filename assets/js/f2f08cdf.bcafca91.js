"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6781],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return m}});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(o),m=a,g=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return o?n.createElement(g,l(l({ref:t},u),{},{components:o})):n.createElement(g,l({ref:t},u))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=o[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},4241:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=o(7462),a=o(3366),r=(o(7294),o(3905)),l=["components"],s={sidebar_position:1},i="useLocalStorage",c={unversionedId:"hooks/browser/use-local-storage",id:"hooks/browser/use-local-storage",isDocsHomePage:!1,title:"useLocalStorage",description:"What is it needed for",source:"@site/docs/hooks/browser/use-local-storage.md",sourceDirName:"hooks/browser",slug:"/hooks/browser/use-local-storage",permalink:"/react-hooks-kit/docs/hooks/browser/use-local-storage",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/hooks/browser/use-local-storage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"useUnmount",permalink:"/react-hooks-kit/docs/hooks/lifecycles/use-unmount"},next:{title:"useGeolocation",permalink:"/react-hooks-kit/docs/hooks/browser/use-geolocation"}},u=[{value:"What is it needed for",id:"what-is-it-needed-for",children:[]},{value:"Advantages",id:"advantages",children:[]},{value:"How to start using",id:"how-to-start-using",children:[]},{value:"Options",id:"options",children:[]}],d={toc:u};function p(e){var t=e.components,o=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"uselocalstorage"},"useLocalStorage"),(0,r.kt)("h2",{id:"what-is-it-needed-for"},"What is it needed for"),(0,r.kt)("p",null,"This hook allows you to manage local storage through the browser API. It is possible to read, write new and delete values from local storage."),(0,r.kt)("h2",{id:"advantages"},"Advantages"),(0,r.kt)("p",null,"Using this hook, you can conveniently read data by key and write new values to local storage. Since all data is stored in the local storage as strings, this hook already contains the parsing of these values from the string."),(0,r.kt)("h2",{id:"how-to-start-using"},"How to start using"),(0,r.kt)("p",null,"In order to start using this hook, you need to import it into your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useLocalStorage } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { value, setValue, removeValue, clearAllValues } = useLocalStorage({key: 'theme'});\n\n  // Prints the default value to the console\n  console.log(value); // undefined\n\n  // Button component\n  // Adds value to localStorage\n  <button onClick={() => setValue({ mode: 'light' })}>Add theme</button>\n\n  // Prints the new value to the console\n  console.log(value); // { mode: 'light' }\n}\n")),(0,r.kt)("p",null,"You can also set the initial state for the key in local storage:\nThe ",(0,r.kt)("strong",{parentName:"p"},"initialValue")," parameter is optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useLocalStorage } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { value, setValue, removeValue, clearAllValues } = useLocalStorage({key: 'theme', initialValue: { mode: 'light' }});\n\n  // Prints the default value to the console\n  console.log(value); // { mode: 'light' }\n\n  // Button component\n  // Adds value to localStorage\n  <button onClick={() => setValue({ mode: 'dark' })}>Change theme</button>\n\n  // Prints the new value to the console\n  console.log(value); // { mode: 'dark' }\n}\n")),(0,r.kt)("p",null,"It is also possible to delete values from local storage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useLocalStorage } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { value, setValue, removeValue, clearAllValues } = useLocalStorage({key: 'theme', initialValue: { mode: 'light' }});\n\n  // Prints the default value to the console\n  console.log(value); // { mode: 'light' }\n\n  // Button component\n  // Removes value from localStorage by key\n  <button onClick={() => removeValue('theme')}>Delete theme</button>\n\n  // Prints the new value to the console\n  console.log(value); // undefined\n}\n")),(0,r.kt)("p",null,"As in the browser API, the ability to completely clear the local storage has been added:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useLocalStorage } from 'react-hooks-kit';\n\nconst Component = () => {\n  const { value, setValue, removeValue, clearAllValues } = useLocalStorage({key: 'theme', initialValue: { mode: 'light' }});\n\n  // Prints the default value to the console\n  console.log(value); // { mode: 'light' }\n\n  // Button component\n  // Clears all values from localStorage\n  <button onClick={() => clearAllValues()}>Clear local storage</button>\n\n  // Prints the new value to the console\n  console.log(value); // undefined\n}\n")),(0,r.kt)("p",null,"The following functions are available for working with local storage:"),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"value"),(0,r.kt)("td",{parentName:"tr",align:"center"},"T, undefined"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Returns the value of the local storage by key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"setValue"),(0,r.kt)("td",{parentName:"tr",align:"center"},"T, unknown, undefined"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Sets the value of local storage.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"removeValue"),(0,r.kt)("td",{parentName:"tr",align:"center"},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Removes a value from local storage by key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"clearAllValues"),(0,r.kt)("td",{parentName:"tr",align:"center"},"() => void"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Clears all local storage values.")))))}p.isMDXComponent=!0}}]);